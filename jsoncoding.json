{
  "name": "Coding",
  "files": {
    "main.py": "",
    "utils.py": "",
    "app.py": "",
    "streamlit_coding_interface copy.py": "import streamlit as st\r\nimport os\r\nimport json\r\nfrom pathlib import Path\r\nimport zipfile\r\nimport io\r\n\r\n# Sayfa yapılandırması\r\nst.set_page_config(\r\n    page_title=\"🚀 Streamlit Kodlama Arayüzü\",\r\n    page_icon=\"🚀\",\r\n    layout=\"wide\",\r\n    initial_sidebar_state=\"expanded\"\r\n)\r\n\r\n# CSS stilleri\r\nst.markdown(\"\"\"\r\n<style>\r\n    .main-header {\r\n        background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);\r\n        padding: 1rem;\r\n        border-radius: 10px;\r\n        margin-bottom: 2rem;\r\n    }\r\n    .project-card {\r\n        background: #f8f9fa;\r\n        padding: 1rem;\r\n        border-radius: 8px;\r\n        border-left: 4px solid #667eea;\r\n        margin-bottom: 1rem;\r\n    }\r\n    .file-content {\r\n        background: #1e1e1e;\r\n        color: #d4d4d4;\r\n        padding: 1rem;\r\n        border-radius: 8px;\r\n        font-family: 'Courier New', monospace;\r\n    }\r\n    .success-box {\r\n        background: #d4edda;\r\n        border: 1px solid #c3e6cb;\r\n        color: #155724;\r\n        padding: 1rem;\r\n        border-radius: 8px;\r\n        margin: 1rem 0;\r\n    }\r\n</style>\r\n\"\"\", unsafe_allow_html=True)\r\n\r\n# Başlık\r\nst.markdown(\"\"\"\r\n<div class=\"main-header\">\r\n    <h1 style=\"color: white; margin: 0;\">🚀 Streamlit Kodlama Arayüzü</h1>\r\n    <p style=\"color: white; margin: 0; opacity: 0.8;\">Tab geçişli proje yönetimi ve kod editörü</p>\r\n</div>\r\n\"\"\", unsafe_allow_html=True)\r\n\r\n# Session state başlatma\r\nif 'projects' not in st.session_state:\r\n    st.session_state.projects = {\r\n        'veri_analizi': {\r\n            'name': '📊 Veri Analizi Projesi',\r\n            'files': {\r\n                'main.py': '''import streamlit as st\r\nimport pandas as pd\r\nimport numpy as np\r\nimport plotly.express as px\r\n\r\nst.title('📊 Veri Analizi Projesi')\r\n\r\n# Sidebar\r\nst.sidebar.header('📋 Parametreler')\r\nsample_size = st.sidebar.slider('Örnek boyutu', 10, 1000, 100)\r\nchart_type = st.sidebar.selectbox('Grafik türü', ['Scatter', 'Line', 'Bar'])\r\n\r\n# Ana içerik\r\ncol1, col2 = st.columns(2)\r\n\r\nwith col1:\r\n    st.header('📈 Veri Üretimi')\r\n    \r\n    # Örnek veri oluştur\r\n    data = pd.DataFrame({\r\n        'x': np.random.randn(sample_size),\r\n        'y': np.random.randn(sample_size),\r\n        'kategori': np.random.choice(['A', 'B', 'C'], sample_size)\r\n    })\r\n    \r\n    st.dataframe(data.head(10), use_container_width=True)\r\n    \r\n    # İstatistikler\r\n    st.subheader('📊 Temel İstatistikler')\r\n    stats = {\r\n        'Ortalama X': data['x'].mean(),\r\n        'Ortalama Y': data['y'].mean(),\r\n        'Standart Sapma X': data['x'].std(),\r\n        'Standart Sapma Y': data['y'].std()\r\n    }\r\n    \r\n    for key, value in stats.items():\r\n        st.metric(key, f\"{value:.2f}\")\r\n\r\nwith col2:\r\n    st.header('📊 Görselleştirme')\r\n    \r\n    if chart_type == 'Scatter':\r\n        fig = px.scatter(data, x='x', y='y', color='kategori', \r\n                        title='Scatter Plot')\r\n    elif chart_type == 'Line':\r\n        fig = px.line(data.sort_values('x'), x='x', y='y', \r\n                     title='Line Plot')\r\n    else:\r\n        fig = px.bar(data.groupby('kategori').size().reset_index(name='count'), \r\n                    x='kategori', y='count', title='Bar Chart')\r\n    \r\n    st.plotly_chart(fig, use_container_width=True)\r\n\r\n# Veri indirme\r\nst.header('💾 Veri İndirme')\r\nif st.button('CSV olarak indir'):\r\n    csv = data.to_csv(index=False)\r\n    st.download_button(\r\n        label=\"📁 CSV dosyasını indir\",\r\n        data=csv,\r\n        file_name='veri_analizi.csv',\r\n        mime='text/csv'\r\n    )\r\n\r\nst.success('✅ Veri başarıyla oluşturuldu!')''',\r\n                \r\n                'utils.py': '''import pandas as pd\r\nimport numpy as np\r\nfrom datetime import datetime, timedelta\r\n\r\ndef generate_sample_data(size=100, start_date='2024-01-01'):\r\n    \"\"\"\r\n    Örnek zaman serisi verisi üretir\r\n    \"\"\"\r\n    start = pd.to_datetime(start_date)\r\n    dates = [start + timedelta(days=i) for i in range(size)]\r\n    \r\n    return pd.DataFrame({\r\n        'tarih': dates,\r\n        'deger': np.random.randn(size).cumsum() + 100,\r\n        'kategori': np.random.choice(['A', 'B', 'C'], size),\r\n        'hacim': np.random.randint(1000, 10000, size)\r\n    })\r\n\r\ndef calculate_statistics(df, column='deger'):\r\n    \"\"\"\r\n    Temel istatistikleri hesaplar\r\n    \"\"\"\r\n    return {\r\n        'ortalama': df[column].mean(),\r\n        'medyan': df[column].median(),\r\n        'standart_sapma': df[column].std(),\r\n        'minimum': df[column].min(),\r\n        'maksimum': df[column].max(),\r\n        'q25': df[column].quantile(0.25),\r\n        'q75': df[column].quantile(0.75)\r\n    }\r\n\r\ndef create_summary_table(df):\r\n    \"\"\"\r\n    Özet tablo oluşturur\r\n    \"\"\"\r\n    summary = df.describe()\r\n    return summary\r\n'''\r\n            }\r\n        },\r\n        'dashboard': {\r\n            'name': '🎯 Dashboard Projesi',\r\n            'files': {\r\n                'app.py': '''import streamlit as st\r\nimport plotly.express as px\r\nimport plotly.graph_objects as go\r\nimport pandas as pd\r\nimport numpy as np\r\n\r\nst.set_page_config(page_title=\"Dashboard\", layout=\"wide\")\r\n\r\nst.title('🎯 İş Dashboard\\'u')\r\n\r\n# Örnek veri\r\nnp.random.seed(42)\r\ndata = pd.DataFrame({\r\n    'Kategori': ['Satış', 'Pazarlama', 'Operasyon', 'İK', 'Finans'],\r\n    'Bu_Ay': [250000, 180000, 320000, 150000, 200000],\r\n    'Gecen_Ay': [230000, 190000, 300000, 140000, 180000],\r\n    'Hedef': [280000, 200000, 350000, 160000, 220000]\r\n})\r\n\r\n# Üst metrikler\r\ncol1, col2, col3, col4 = st.columns(4)\r\n\r\nwith col1:\r\n    total_current = data['Bu_Ay'].sum()\r\n    total_previous = data['Gecen_Ay'].sum()\r\n    delta = total_current - total_previous\r\n    st.metric(\"💰 Toplam Gelir\", f\"₺{total_current:,}\", f\"{delta:+,}\")\r\n\r\nwith col2:\r\n    avg_performance = (data['Bu_Ay'] / data['Hedef']).mean() * 100\r\n    st.metric(\"📊 Ortalama Performans\", f\"{avg_performance:.1f}%\")\r\n\r\nwith col3:\r\n    best_dept = data.loc[data['Bu_Ay'].idxmax(), 'Kategori']\r\n    st.metric(\"🏆 En İyi Departman\", best_dept)\r\n\r\nwith col4:\r\n    growth_rate = ((total_current - total_previous) / total_previous) * 100\r\n    st.metric(\"📈 Büyüme Oranı\", f\"{growth_rate:.1f}%\")\r\n\r\nst.divider()\r\n\r\n# Tab'lar\r\ntab1, tab2, tab3, tab4 = st.tabs(['📊 Departman Analizi', '📈 Trend Analizi', '🎯 Hedef Karşılaştırma', '📋 Detay Tablo'])\r\n\r\nwith tab1:\r\n    col1, col2 = st.columns(2)\r\n    \r\n    with col1:\r\n        fig_bar = px.bar(data, x='Kategori', y='Bu_Ay', \r\n                        title='Departman Bazında Bu Ay Performansı',\r\n                        color='Bu_Ay', color_continuous_scale='viridis')\r\n        st.plotly_chart(fig_bar, use_container_width=True)\r\n    \r\n    with col2:\r\n        fig_pie = px.pie(data, values='Bu_Ay', names='Kategori',\r\n                        title='Departman Bazında Dağılım')\r\n        st.plotly_chart(fig_pie, use_container_width=True)\r\n\r\nwith tab2:\r\n    # Trend verisi oluştur\r\n    months = ['Ocak', 'Şubat', 'Mart', 'Nisan', 'Mayıs', 'Haziran']\r\n    trend_data = pd.DataFrame({\r\n        'Ay': months,\r\n        'Toplam': [800000, 850000, 920000, 880000, 950000, total_current]\r\n    })\r\n    \r\n    fig_line = px.line(trend_data, x='Ay', y='Toplam',\r\n                      title='6 Aylık Gelir Trendi',\r\n                      markers=True)\r\n    fig_line.update_traces(line_color='#667eea', line_width=3)\r\n    st.plotly_chart(fig_line, use_container_width=True)\r\n\r\nwith tab3:\r\n    # Hedef karşılaştırması\r\n    data_melted = pd.melt(data, id_vars=['Kategori'], \r\n                         value_vars=['Bu_Ay', 'Hedef'],\r\n                         var_name='Tip', value_name='Değer')\r\n    \r\n    fig_grouped = px.bar(data_melted, x='Kategori', y='Değer', \r\n                        color='Tip', barmode='group',\r\n                        title='Gerçekleşen vs Hedef Karşılaştırması')\r\n    st.plotly_chart(fig_grouped, use_container_width=True)\r\n    \r\n    # Hedef başarı oranları\r\n    data['Başarı_Oranı'] = (data['Bu_Ay'] / data['Hedef'] * 100).round(1)\r\n    \r\n    for _, row in data.iterrows():\r\n        color = \"🟢\" if row['Başarı_Oranı'] >= 100 else \"🟡\" if row['Başarı_Oranı'] >= 90 else \"🔴\"\r\n        st.write(f\"{color} **{row['Kategori']}**: %{row['Başarı_Oranı']} ({row['Bu_Ay']:,} / {row['Hedef']:,})\")\r\n\r\nwith tab4:\r\n    st.subheader('📋 Detay Veri Tablosu')\r\n    \r\n    # Hesaplanan sütunlar ekle\r\n    display_data = data.copy()\r\n    display_data['Değişim'] = display_data['Bu_Ay'] - display_data['Gecen_Ay']\r\n    display_data['Değişim_Yüzde'] = ((display_data['Bu_Ay'] - display_data['Gecen_Ay']) / display_data['Gecen_Ay'] * 100).round(2)\r\n    display_data['Hedef_Kalan'] = display_data['Hedef'] - display_data['Bu_Ay']\r\n    \r\n    st.dataframe(display_data, use_container_width=True)\r\n    \r\n    # Excel indirme\r\n    def convert_df_to_excel(df):\r\n        output = io.BytesIO()\r\n        with pd.ExcelWriter(output, engine='openpyxl') as writer:\r\n            df.to_excel(writer, sheet_name='Dashboard_Data', index=False)\r\n        return output.getvalue()\r\n    \r\n    excel_data = convert_df_to_excel(display_data)\r\n    st.download_button(\r\n        label=\"📁 Excel olarak indir\",\r\n        data=excel_data,\r\n        file_name='dashboard_data.xlsx',\r\n        mime='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\r\n    )\r\n\r\n# Footer\r\nst.divider()\r\nst.markdown(\"**📊 Dashboard Özeti:** Tüm departmanlar genel olarak hedeflerine yakın performans gösteriyor.\")'''\r\n            }\r\n        }\r\n    }\r\n\r\nif 'active_project' not in st.session_state:\r\n    st.session_state.active_project = 'veri_analizi'\r\n\r\nif 'active_file' not in st.session_state:\r\n    st.session_state.active_file = 'main.py'\r\n\r\n# Sidebar - Proje Yöneticisi\r\nwith st.sidebar:\r\n    st.header(\"📁 Proje Yöneticisi\")\r\n    \r\n    # Proje seçimi\r\n    project_names = {k: v['name'] for k, v in st.session_state.projects.items()}\r\n    selected_project = st.selectbox(\r\n        \"Aktif Proje\",\r\n        options=list(project_names.keys()),\r\n        format_func=lambda x: project_names[x],\r\n        index=list(project_names.keys()).index(st.session_state.active_project)\r\n    )\r\n    \r\n    if selected_project != st.session_state.active_project:\r\n        st.session_state.active_project = selected_project\r\n        st.session_state.active_file = list(st.session_state.projects[selected_project]['files'].keys())[0]\r\n        st.rerun()\r\n    \r\n    # Yeni proje ekleme\r\n    st.subheader(\"➕ Yeni Proje\")\r\n    new_project_name = st.text_input(\"Proje adı\")\r\n    if st.button(\"Proje Oluştur\") and new_project_name:\r\n        project_key = new_project_name.lower().replace(' ', '_')\r\n        st.session_state.projects[project_key] = {\r\n            'name': new_project_name,\r\n            'files': {\r\n                'main.py': f'''import streamlit as st\r\n\r\nst.title('{new_project_name}')\r\n\r\nst.write(\"🚀 Yeni proje başlatıldı!\")\r\n\r\n# Buraya kodunuzu yazın\r\nst.success(\"Proje hazır!\")'''\r\n            }\r\n        }\r\n        st.session_state.active_project = project_key\r\n        st.session_state.active_file = 'main.py'\r\n        st.success(f\"✅ {new_project_name} projesi oluşturuldu!\")\r\n        st.rerun()\r\n    \r\n    st.divider()\r\n    \r\n    # Dosya yöneticisi\r\n    st.subheader(\"📄 Dosyalar\")\r\n    current_project = st.session_state.projects[st.session_state.active_project]\r\n    \r\n    # Dosya seçimi\r\n    selected_file = st.selectbox(\r\n        \"Aktif Dosya\",\r\n        options=list(current_project['files'].keys()),\r\n        index=list(current_project['files'].keys()).index(st.session_state.active_file)\r\n    )\r\n    \r\n    if selected_file != st.session_state.active_file:\r\n        st.session_state.active_file = selected_file\r\n        st.rerun()\r\n    \r\n    # Yeni dosya ekleme\r\n    new_file_name = st.text_input(\"Yeni dosya adı (örn: utils.py)\")\r\n    if st.button(\"Dosya Ekle\") and new_file_name:\r\n        if not new_file_name.endswith('.py'):\r\n            new_file_name += '.py'\r\n        \r\n        st.session_state.projects[st.session_state.active_project]['files'][new_file_name] = f'''# {new_file_name}\r\n\r\n# Yeni dosya içeriği buraya yazılacak\r\n'''\r\n        st.session_state.active_file = new_file_name\r\n        st.success(f\"✅ {new_file_name} dosyası eklendi!\")\r\n        st.rerun()\r\n    \r\n    st.divider()\r\n    \r\n    # Proje işlemleri\r\n    st.subheader(\"🔧 Proje İşlemleri\")\r\n    \r\n    # Proje export\r\n    if st.button(\"📦 Projeyi Export Et\"):\r\n        project_data = st.session_state.projects[st.session_state.active_project]\r\n        json_data = json.dumps(project_data, indent=2, ensure_ascii=False)\r\n        \r\n        st.download_button(\r\n            label=\"💾 JSON olarak indir\",\r\n            data=json_data,\r\n            file_name=f\"{st.session_state.active_project}.json\",\r\n            mime=\"application/json\"\r\n        )\r\n\r\n# Ana içerik alanı\r\ncurrent_project = st.session_state.projects[st.session_state.active_project]\r\ncurrent_file_content = current_project['files'][st.session_state.active_file]\r\n\r\n# Proje bilgileri\r\ncol1, col2, col3 = st.columns([2, 1, 1])\r\nwith col1:\r\n    st.markdown(f\"### 📁 {current_project['name']}\")\r\nwith col2:\r\n    st.markdown(f\"**📄 Dosya:** `{st.session_state.active_file}`\")\r\nwith col3:\r\n    if st.button(\"🔄 Sayfayı Yenile\"):\r\n        st.rerun()\r\n\r\n# Tab'lar\r\ntab1, tab2, tab3 = st.tabs([\"✏️ Kod Editörü\", \"👁️ Önizleme\", \"📊 Analiz\"])\r\n\r\nwith tab1:\r\n    st.subheader(f\"📝 {st.session_state.active_file} - Kod Editörü\")\r\n    \r\n    # Kod editörü\r\n    edited_code = st.text_area(\r\n        \"Kod\",\r\n        value=current_file_content,\r\n        height=500,\r\n        help=\"Python kodunuzu buraya yazın\",\r\n        label_visibility=\"collapsed\"\r\n    )\r\n    \r\n    # Kod güncelleme\r\n    if edited_code != current_file_content:\r\n        if st.button(\"💾 Değişiklikleri Kaydet\"):\r\n            st.session_state.projects[st.session_state.active_project]['files'][st.session_state.active_file] = edited_code\r\n            st.success(\"✅ Kod başarıyla kaydedildi!\")\r\n            st.rerun()\r\n    \r\n    # Kod kopyalama\r\n    st.code(current_file_content, language='python')\r\n    \r\n    col1, col2 = st.columns(2)\r\n    with col1:\r\n        if st.button(\"📋 Kodu Kopyala\"):\r\n            st.code(current_file_content, language='python')\r\n            st.info(\"💡 Yukarıdaki kod bloğundan kopyalayabilirsiniz\")\r\n    \r\n    with col2:\r\n        # Dosya indirme\r\n        st.download_button(\r\n            label=\"📁 Dosyayı İndir\",\r\n            data=current_file_content,\r\n            file_name=st.session_state.active_file,\r\n            mime=\"text/plain\"\r\n        )\r\n\r\nwith tab2:\r\n    st.subheader(\"👁️ Kod Önizlemesi\")\r\n    \r\n    st.markdown(\"\"\"\r\n    <div class=\"success-box\">\r\n        <h4>🚀 Streamlit'te Çalıştırma Talimatları:</h4>\r\n        <ol>\r\n            <li>Kodu kopyalayın veya dosyayı indirin</li>\r\n            <li>Yeni bir .py dosyası oluşturup yapıştırın</li>\r\n            <li><code>streamlit run dosya_adi.py</code> komutu ile çalıştırın</li>\r\n        </ol>\r\n    </div>\r\n    \"\"\", unsafe_allow_html=True)\r\n    \r\n    # Kod syntax highlighting\r\n    st.code(current_file_content, language='python')\r\n\r\nwith tab3:\r\n    st.subheader(\"📊 Kod Analizi\")\r\n    \r\n    # Kod istatistikleri\r\n    lines = current_file_content.split('\\n')\r\n    \r\n    col1, col2, col3, col4 = st.columns(4)\r\n    \r\n    with col1:\r\n        st.metric(\"📏 Toplam Satır\", len(lines))\r\n    \r\n    with col2:\r\n        non_empty_lines = len([line for line in lines if line.strip()])\r\n        st.metric(\"📝 Kod Satırları\", non_empty_lines)\r\n    \r\n    with col3:\r\n        comment_lines = len([line for line in lines if line.strip().startswith('#')])\r\n        st.metric(\"💬 Yorum Satırları\", comment_lines)\r\n    \r\n    with col4:\r\n        import_lines = len([line for line in lines if line.strip().startswith(('import ', 'from '))])\r\n        st.metric(\"📦 Import Satırları\", import_lines)\r\n    \r\n    # Import analizi\r\n    imports = [line.strip() for line in lines if line.strip().startswith(('import ', 'from '))]\r\n    if imports:\r\n        st.subheader(\"📦 Kullanılan Kütüphaneler\")\r\n        for imp in imports:\r\n            st.code(imp, language='python')\r\n\r\n# Footer\r\nst.divider()\r\nst.markdown(\"\"\"\r\n<div style=\"text-align: center; color: #666; padding: 1rem;\">\r\n    <p>🚀 <strong>Streamlit Kodlama Arayüzü</strong> | Tab geçişli proje yönetimi</p>\r\n    <p>💡 Projelerinizi organize edin, kodlayın ve test edin!</p>\r\n</div>\r\n\"\"\", unsafe_allow_html=True)",
    "streamlit_coding_interface.py": "import streamlit as st\r\nimport os\r\nimport json\r\nfrom pathlib import Path\r\nimport zipfile\r\nimport io\r\n\r\n# Sayfa yapılandırması\r\nst.set_page_config(\r\n    page_title=\"🚀 Streamlit Kodlama Arayüzü\",\r\n    page_icon=\"🚀\",\r\n    layout=\"wide\",\r\n    initial_sidebar_state=\"expanded\"\r\n)\r\n\r\n# CSS stilleri\r\nst.markdown(\"\"\"\r\n<style>\r\n    .main-header {\r\n        background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);\r\n        padding: 1rem;\r\n        border-radius: 10px;\r\n        margin-bottom: 2rem;\r\n    }\r\n    .project-card {\r\n        background: #f8f9fa;\r\n        padding: 1rem;\r\n        border-radius: 8px;\r\n        border-left: 4px solid #667eea;\r\n        margin-bottom: 1rem;\r\n    }\r\n    .file-content {\r\n        background: #1e1e1e;\r\n        color: #d4d4d4;\r\n        padding: 1rem;\r\n        border-radius: 8px;\r\n        font-family: 'Courier New', monospace;\r\n    }\r\n    .success-box {\r\n        background: #d4edda;\r\n        border: 1px solid #c3e6cb;\r\n        color: #155724;\r\n        padding: 1rem;\r\n        border-radius: 8px;\r\n        margin: 1rem 0;\r\n    }\r\n</style>\r\n\"\"\", unsafe_allow_html=True)\r\n\r\n# Başlık\r\nst.markdown(\"\"\"\r\n<div class=\"main-header\">\r\n    <h1 style=\"color: white; margin: 0;\">🚀 Streamlit Kodlama Arayüzü</h1>\r\n    <p style=\"color: white; margin: 0; opacity: 0.8;\">Tab geçişli proje yönetimi ve kod editörü</p>\r\n</div>\r\n\"\"\", unsafe_allow_html=True)\r\n\r\n# Session state başlatma\r\nif 'projects' not in st.session_state:\r\n    st.session_state.projects = {\r\n        'veri_analizi': {\r\n            'name': '📊 Veri Analizi Projesi',\r\n            'files': {\r\n                'main.py': '''import streamlit as st\r\nimport pandas as pd\r\nimport numpy as np\r\nimport plotly.express as px\r\n\r\nst.title('📊 Veri Analizi Projesi')\r\n\r\n# Sidebar\r\nst.sidebar.header('📋 Parametreler')\r\nsample_size = st.sidebar.slider('Örnek boyutu', 10, 1000, 100)\r\nchart_type = st.sidebar.selectbox('Grafik türü', ['Scatter', 'Line', 'Bar'])\r\n\r\n# Ana içerik\r\ncol1, col2 = st.columns(2)\r\n\r\nwith col1:\r\n    st.header('📈 Veri Üretimi')\r\n    \r\n    # Örnek veri oluştur\r\n    data = pd.DataFrame({\r\n        'x': np.random.randn(sample_size),\r\n        'y': np.random.randn(sample_size),\r\n        'kategori': np.random.choice(['A', 'B', 'C'], sample_size)\r\n    })\r\n    \r\n    st.dataframe(data.head(10), use_container_width=True)\r\n    \r\n    # İstatistikler\r\n    st.subheader('📊 Temel İstatistikler')\r\n    stats = {\r\n        'Ortalama X': data['x'].mean(),\r\n        'Ortalama Y': data['y'].mean(),\r\n        'Standart Sapma X': data['x'].std(),\r\n        'Standart Sapma Y': data['y'].std()\r\n    }\r\n    \r\n    for key, value in stats.items():\r\n        st.metric(key, f\"{value:.2f}\")\r\n\r\nwith col2:\r\n    st.header('📊 Görselleştirme')\r\n    \r\n    if chart_type == 'Scatter':\r\n        fig = px.scatter(data, x='x', y='y', color='kategori', \r\n                        title='Scatter Plot')\r\n    elif chart_type == 'Line':\r\n        fig = px.line(data.sort_values('x'), x='x', y='y', \r\n                     title='Line Plot')\r\n    else:\r\n        fig = px.bar(data.groupby('kategori').size().reset_index(name='count'), \r\n                    x='kategori', y='count', title='Bar Chart')\r\n    \r\n    st.plotly_chart(fig, use_container_width=True)\r\n\r\n# Veri indirme\r\nst.header('💾 Veri İndirme')\r\nif st.button('CSV olarak indir'):\r\n    csv = data.to_csv(index=False)\r\n    st.download_button(\r\n        label=\"📁 CSV dosyasını indir\",\r\n        data=csv,\r\n        file_name='veri_analizi.csv',\r\n        mime='text/csv'\r\n    )\r\n\r\nst.success('✅ Veri başarıyla oluşturuldu!')''',\r\n                \r\n                'utils.py': '''import pandas as pd\r\nimport numpy as np\r\nfrom datetime import datetime, timedelta\r\n\r\ndef generate_sample_data(size=100, start_date='2024-01-01'):\r\n    \"\"\"\r\n    Örnek zaman serisi verisi üretir\r\n    \"\"\"\r\n    start = pd.to_datetime(start_date)\r\n    dates = [start + timedelta(days=i) for i in range(size)]\r\n    \r\n    return pd.DataFrame({\r\n        'tarih': dates,\r\n        'deger': np.random.randn(size).cumsum() + 100,\r\n        'kategori': np.random.choice(['A', 'B', 'C'], size),\r\n        'hacim': np.random.randint(1000, 10000, size)\r\n    })\r\n\r\ndef calculate_statistics(df, column='deger'):\r\n    \"\"\"\r\n    Temel istatistikleri hesaplar\r\n    \"\"\"\r\n    return {\r\n        'ortalama': df[column].mean(),\r\n        'medyan': df[column].median(),\r\n        'standart_sapma': df[column].std(),\r\n        'minimum': df[column].min(),\r\n        'maksimum': df[column].max(),\r\n        'q25': df[column].quantile(0.25),\r\n        'q75': df[column].quantile(0.75)\r\n    }\r\n\r\ndef create_summary_table(df):\r\n    \"\"\"\r\n    Özet tablo oluşturur\r\n    \"\"\"\r\n    summary = df.describe()\r\n    return summary\r\n'''\r\n            }\r\n        },\r\n        'dashboard': {\r\n            'name': '🎯 Dashboard Projesi',\r\n            'files': {\r\n                'app.py': '''import streamlit as st\r\nimport plotly.express as px\r\nimport plotly.graph_objects as go\r\nimport pandas as pd\r\nimport numpy as np\r\n\r\nst.set_page_config(page_title=\"Dashboard\", layout=\"wide\")\r\n\r\nst.title('🎯 İş Dashboard\\'u')\r\n\r\n# Örnek veri\r\nnp.random.seed(42)\r\ndata = pd.DataFrame({\r\n    'Kategori': ['Satış', 'Pazarlama', 'Operasyon', 'İK', 'Finans'],\r\n    'Bu_Ay': [250000, 180000, 320000, 150000, 200000],\r\n    'Gecen_Ay': [230000, 190000, 300000, 140000, 180000],\r\n    'Hedef': [280000, 200000, 350000, 160000, 220000]\r\n})\r\n\r\n# Üst metrikler\r\ncol1, col2, col3, col4 = st.columns(4)\r\n\r\nwith col1:\r\n    total_current = data['Bu_Ay'].sum()\r\n    total_previous = data['Gecen_Ay'].sum()\r\n    delta = total_current - total_previous\r\n    st.metric(\"💰 Toplam Gelir\", f\"₺{total_current:,}\", f\"{delta:+,}\")\r\n\r\nwith col2:\r\n    avg_performance = (data['Bu_Ay'] / data['Hedef']).mean() * 100\r\n    st.metric(\"📊 Ortalama Performans\", f\"{avg_performance:.1f}%\")\r\n\r\nwith col3:\r\n    best_dept = data.loc[data['Bu_Ay'].idxmax(), 'Kategori']\r\n    st.metric(\"🏆 En İyi Departman\", best_dept)\r\n\r\nwith col4:\r\n    growth_rate = ((total_current - total_previous) / total_previous) * 100\r\n    st.metric(\"📈 Büyüme Oranı\", f\"{growth_rate:.1f}%\")\r\n\r\nst.divider()\r\n\r\n# Tab'lar\r\ntab1, tab2, tab3, tab4 = st.tabs(['📊 Departman Analizi', '📈 Trend Analizi', '🎯 Hedef Karşılaştırma', '📋 Detay Tablo'])\r\n\r\nwith tab1:\r\n    col1, col2 = st.columns(2)\r\n    \r\n    with col1:\r\n        fig_bar = px.bar(data, x='Kategori', y='Bu_Ay', \r\n                        title='Departman Bazında Bu Ay Performansı',\r\n                        color='Bu_Ay', color_continuous_scale='viridis')\r\n        st.plotly_chart(fig_bar, use_container_width=True)\r\n    \r\n    with col2:\r\n        fig_pie = px.pie(data, values='Bu_Ay', names='Kategori',\r\n                        title='Departman Bazında Dağılım')\r\n        st.plotly_chart(fig_pie, use_container_width=True)\r\n\r\nwith tab2:\r\n    # Trend verisi oluştur\r\n    months = ['Ocak', 'Şubat', 'Mart', 'Nisan', 'Mayıs', 'Haziran']\r\n    trend_data = pd.DataFrame({\r\n        'Ay': months,\r\n        'Toplam': [800000, 850000, 920000, 880000, 950000, total_current]\r\n    })\r\n    \r\n    fig_line = px.line(trend_data, x='Ay', y='Toplam',\r\n                      title='6 Aylık Gelir Trendi',\r\n                      markers=True)\r\n    fig_line.update_traces(line_color='#667eea', line_width=3)\r\n    st.plotly_chart(fig_line, use_container_width=True)\r\n\r\nwith tab3:\r\n    # Hedef karşılaştırması\r\n    data_melted = pd.melt(data, id_vars=['Kategori'], \r\n                         value_vars=['Bu_Ay', 'Hedef'],\r\n                         var_name='Tip', value_name='Değer')\r\n    \r\n    fig_grouped = px.bar(data_melted, x='Kategori', y='Değer', \r\n                        color='Tip', barmode='group',\r\n                        title='Gerçekleşen vs Hedef Karşılaştırması')\r\n    st.plotly_chart(fig_grouped, use_container_width=True)\r\n    \r\n    # Hedef başarı oranları\r\n    data['Başarı_Oranı'] = (data['Bu_Ay'] / data['Hedef'] * 100).round(1)\r\n    \r\n    for _, row in data.iterrows():\r\n        color = \"🟢\" if row['Başarı_Oranı'] >= 100 else \"🟡\" if row['Başarı_Oranı'] >= 90 else \"🔴\"\r\n        st.write(f\"{color} **{row['Kategori']}**: %{row['Başarı_Oranı']} ({row['Bu_Ay']:,} / {row['Hedef']:,})\")\r\n\r\nwith tab4:\r\n    st.subheader('📋 Detay Veri Tablosu')\r\n    \r\n    # Hesaplanan sütunlar ekle\r\n    display_data = data.copy()\r\n    display_data['Değişim'] = display_data['Bu_Ay'] - display_data['Gecen_Ay']\r\n    display_data['Değişim_Yüzde'] = ((display_data['Bu_Ay'] - display_data['Gecen_Ay']) / display_data['Gecen_Ay'] * 100).round(2)\r\n    display_data['Hedef_Kalan'] = display_data['Hedef'] - display_data['Bu_Ay']\r\n    \r\n    st.dataframe(display_data, use_container_width=True)\r\n    \r\n    # Excel indirme\r\n    def convert_df_to_excel(df):\r\n        output = io.BytesIO()\r\n        with pd.ExcelWriter(output, engine='openpyxl') as writer:\r\n            df.to_excel(writer, sheet_name='Dashboard_Data', index=False)\r\n        return output.getvalue()\r\n    \r\n    excel_data = convert_df_to_excel(display_data)\r\n    st.download_button(\r\n        label=\"📁 Excel olarak indir\",\r\n        data=excel_data,\r\n        file_name='dashboard_data.xlsx',\r\n        mime='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\r\n    )\r\n\r\n# Footer\r\nst.divider()\r\nst.markdown(\"**📊 Dashboard Özeti:** Tüm departmanlar genel olarak hedeflerine yakın performans gösteriyor.\")'''\r\n            }\r\n        }\r\n    }\r\n\r\nif 'active_project' not in st.session_state:\r\n    st.session_state.active_project = 'veri_analizi'\r\n\r\nif 'active_file' not in st.session_state:\r\n    st.session_state.active_file = 'main.py'\r\n\r\n# Sidebar - Proje Yöneticisi\r\nwith st.sidebar:\r\n    st.header(\"📁 Proje Yöneticisi\")\r\n    \r\n    # Proje seçimi\r\n    project_names = {k: v['name'] for k, v in st.session_state.projects.items()}\r\n    selected_project = st.selectbox(\r\n        \"Aktif Proje\",\r\n        options=list(project_names.keys()),\r\n        format_func=lambda x: project_names[x],\r\n        index=list(project_names.keys()).index(st.session_state.active_project)\r\n    )\r\n    \r\n    if selected_project != st.session_state.active_project:\r\n        st.session_state.active_project = selected_project\r\n        st.session_state.active_file = list(st.session_state.projects[selected_project]['files'].keys())[0]\r\n        st.rerun()\r\n    \r\n    # Yeni proje ekleme\r\n    st.subheader(\"➕ Yeni Proje\")\r\n    new_project_name = st.text_input(\"Proje adı\")\r\n    if st.button(\"Proje Oluştur\") and new_project_name:\r\n        project_key = new_project_name.lower().replace(' ', '_')\r\n        st.session_state.projects[project_key] = {\r\n            'name': new_project_name,\r\n            'files': {\r\n                'main.py': f'''import streamlit as st\r\n\r\nst.title('{new_project_name}')\r\n\r\nst.write(\"🚀 Yeni proje başlatıldı!\")\r\n\r\n# Buraya kodunuzu yazın\r\nst.success(\"Proje hazır!\")'''\r\n            }\r\n        }\r\n        st.session_state.active_project = project_key\r\n        st.session_state.active_file = 'main.py'\r\n        st.success(f\"✅ {new_project_name} projesi oluşturuldu!\")\r\n        st.rerun()\r\n    \r\n    st.divider()\r\n    \r\n    # Dosya yöneticisi\r\n    st.subheader(\"📄 Dosyalar\")\r\n    current_project = st.session_state.projects[st.session_state.active_project]\r\n    \r\n    # Dosya seçimi\r\n    selected_file = st.selectbox(\r\n        \"Aktif Dosya\",\r\n        options=list(current_project['files'].keys()),\r\n        index=list(current_project['files'].keys()).index(st.session_state.active_file)\r\n    )\r\n    \r\n    if selected_file != st.session_state.active_file:\r\n        st.session_state.active_file = selected_file\r\n        st.rerun()\r\n    \r\n    # Yeni dosya ekleme\r\n    new_file_name = st.text_input(\"Yeni dosya adı (örn: utils.py)\")\r\n    if st.button(\"Dosya Ekle\") and new_file_name:\r\n        if not new_file_name.endswith('.py'):\r\n            new_file_name += '.py'\r\n        \r\n        st.session_state.projects[st.session_state.active_project]['files'][new_file_name] = f'''# {new_file_name}\r\n\r\n# Yeni dosya içeriği buraya yazılacak\r\n'''\r\n        st.session_state.active_file = new_file_name\r\n        st.success(f\"✅ {new_file_name} dosyası eklendi!\")\r\n        st.rerun()\r\n    \r\n    st.divider()\r\n    \r\n    # Proje işlemleri\r\n    st.subheader(\"🔧 Proje İşlemleri\")\r\n    \r\n    # Proje export\r\n    if st.button(\"📦 Projeyi Export Et\"):\r\n        project_data = st.session_state.projects[st.session_state.active_project]\r\n        json_data = json.dumps(project_data, indent=2, ensure_ascii=False)\r\n        \r\n        st.download_button(\r\n            label=\"💾 JSON olarak indir\",\r\n            data=json_data,\r\n            file_name=f\"{st.session_state.active_project}.json\",\r\n            mime=\"application/json\"\r\n        )\r\n    \r\n    st.divider()\r\n    \r\n    # Proje import\r\n    st.subheader(\"📥 Proje İmport\")\r\n    \r\n    # JSON dosyası yükleme\r\n    uploaded_json = st.file_uploader(\r\n        \"JSON proje dosyası yükle\",\r\n        type=['json'],\r\n        help=\"Daha önce export ettiğiniz proje dosyasını yükleyin\"\r\n    )\r\n    \r\n    if uploaded_json is not None:\r\n        try:\r\n            # JSON dosyasını oku\r\n            json_data = json.loads(uploaded_json.read().decode('utf-8'))\r\n            \r\n            # Proje adını al\r\n            import_project_name = st.text_input(\r\n                \"İmport edilecek proje adı\",\r\n                value=uploaded_json.name.replace('.json', '')\r\n            )\r\n            \r\n            if st.button(\"📥 JSON Projesini İmport Et\") and import_project_name:\r\n                project_key = import_project_name.lower().replace(' ', '_').replace('-', '_')\r\n                \r\n                # Proje var mı kontrol et\r\n                if project_key in st.session_state.projects:\r\n                    st.warning(\"⚠️ Bu isimde bir proje zaten var!\")\r\n                else:\r\n                    # Projeyi ekle\r\n                    st.session_state.projects[project_key] = {\r\n                        'name': import_project_name,\r\n                        'files': json_data.get('files', {})\r\n                    }\r\n                    \r\n                    st.session_state.active_project = project_key\r\n                    st.session_state.active_file = list(json_data.get('files', {}).keys())[0]\r\n                    \r\n                    st.success(f\"✅ {import_project_name} projesi başarıyla import edildi!\")\r\n                    st.rerun()\r\n                    \r\n        except Exception as e:\r\n            st.error(f\"❌ JSON dosyası okuma hatası: {str(e)}\")\r\n    \r\n    # Python dosyası yükleme\r\n    st.subheader(\"📄 Python Dosyası Yükle\")\r\n    uploaded_py = st.file_uploader(\r\n        \"Python dosyası yükle\",\r\n        type=['py'],\r\n        help=\"Mevcut projeye Python dosyası ekleyin\"\r\n    )\r\n    \r\n    if uploaded_py is not None:\r\n        try:\r\n            # Python dosyasını oku\r\n            file_content = uploaded_py.read().decode('utf-8')\r\n            file_name = uploaded_py.name\r\n            \r\n            if st.button(f\"📥 {file_name} dosyasını ekle\"):\r\n                # Dosya var mı kontrol et\r\n                if file_name in st.session_state.projects[st.session_state.active_project]['files']:\r\n                    if st.checkbox(f\"⚠️ {file_name} zaten var. Üzerine yaz?\"):\r\n                        st.session_state.projects[st.session_state.active_project]['files'][file_name] = file_content\r\n                        st.session_state.active_file = file_name\r\n                        st.success(f\"✅ {file_name} dosyası güncellendi!\")\r\n                        st.rerun()\r\n                else:\r\n                    st.session_state.projects[st.session_state.active_project]['files'][file_name] = file_content\r\n                    st.session_state.active_file = file_name\r\n                    st.success(f\"✅ {file_name} dosyası eklendi!\")\r\n                    st.rerun()\r\n                    \r\n        except Exception as e:\r\n            st.error(f\"❌ Python dosyası okuma hatası: {str(e)}\")\r\n    \r\n    # Toplu proje import\r\n    st.subheader(\"📦 Toplu İmport\")\r\n    uploaded_zip = st.file_uploader(\r\n        \"ZIP dosyası yükle\",\r\n        type=['zip'],\r\n        help=\"Birden fazla Python dosyası içeren ZIP dosyası yükleyin\"\r\n    )\r\n    \r\n    if uploaded_zip is not None:\r\n        try:\r\n            with zipfile.ZipFile(uploaded_zip, 'r') as zip_file:\r\n                python_files = [f for f in zip_file.namelist() if f.endswith('.py')]\r\n                \r\n                if python_files:\r\n                    st.write(f\"📄 Bulunan Python dosyaları: {len(python_files)}\")\r\n                    for py_file in python_files:\r\n                        st.write(f\"• {py_file}\")\r\n                    \r\n                    zip_project_name = st.text_input(\r\n                        \"ZIP projesi adı\",\r\n                        value=uploaded_zip.name.replace('.zip', '')\r\n                    )\r\n                    \r\n                    if st.button(\"📥 ZIP Projesini İmport Et\") and zip_project_name:\r\n                        project_key = zip_project_name.lower().replace(' ', '_').replace('-', '_')\r\n                        \r\n                        if project_key in st.session_state.projects:\r\n                            st.warning(\"⚠️ Bu isimde bir proje zaten var!\")\r\n                        else:\r\n                            # Yeni proje oluştur\r\n                            new_project_files = {}\r\n                            \r\n                            for py_file in python_files:\r\n                                file_content = zip_file.read(py_file).decode('utf-8')\r\n                                file_name = os.path.basename(py_file)  # Sadece dosya adını al\r\n                                new_project_files[file_name] = file_content\r\n                            \r\n                            st.session_state.projects[project_key] = {\r\n                                'name': zip_project_name,\r\n                                'files': new_project_files\r\n                            }\r\n                            \r\n                            st.session_state.active_project = project_key\r\n                            st.session_state.active_file = list(new_project_files.keys())[0]\r\n                            \r\n                            st.success(f\"✅ {zip_project_name} projesi ({len(python_files)} dosya) başarıyla import edildi!\")\r\n                            st.rerun()\r\n                else:\r\n                    st.warning(\"⚠️ ZIP dosyasında Python dosyası bulunamadı!\")\r\n                    \r\n        except Exception as e:\r\n            st.error(f\"❌ ZIP dosyası okuma hatası: {str(e)}\")\r\n\r\n# Ana içerik alanı\r\ncurrent_project = st.session_state.projects[st.session_state.active_project]\r\ncurrent_file_content = current_project['files'][st.session_state.active_file]\r\n\r\n# Proje bilgileri\r\ncol1, col2, col3 = st.columns([2, 1, 1])\r\nwith col1:\r\n    st.markdown(f\"### 📁 {current_project['name']}\")\r\nwith col2:\r\n    st.markdown(f\"**📄 Dosya:** `{st.session_state.active_file}`\")\r\nwith col3:\r\n    if st.button(\"🔄 Sayfayı Yenile\"):\r\n        st.rerun()\r\n\r\n# Tab'lar\r\ntab1, tab2, tab3 = st.tabs([\"✏️ Kod Editörü\", \"👁️ Önizleme\", \"📊 Analiz\"])\r\n\r\nwith tab1:\r\n    st.subheader(f\"📝 {st.session_state.active_file} - Kod Editörü\")\r\n    \r\n    # Kod editörü\r\n    edited_code = st.text_area(\r\n        \"Kod\",\r\n        value=current_file_content,\r\n        height=500,\r\n        help=\"Python kodunuzu buraya yazın\",\r\n        label_visibility=\"collapsed\"\r\n    )\r\n    \r\n    # Kod güncelleme\r\n    if edited_code != current_file_content:\r\n        if st.button(\"💾 Değişiklikleri Kaydet\"):\r\n            st.session_state.projects[st.session_state.active_project]['files'][st.session_state.active_file] = edited_code\r\n            st.success(\"✅ Kod başarıyla kaydedildi!\")\r\n            st.rerun()\r\n    \r\n    # Kod kopyalama\r\n    st.code(current_file_content, language='python')\r\n    \r\n    col1, col2 = st.columns(2)\r\n    with col1:\r\n        if st.button(\"📋 Kodu Kopyala\"):\r\n            st.code(current_file_content, language='python')\r\n            st.info(\"💡 Yukarıdaki kod bloğundan kopyalayabilirsiniz\")\r\n    \r\n    with col2:\r\n        # Dosya indirme\r\n        st.download_button(\r\n            label=\"📁 Dosyayı İndir\",\r\n            data=current_file_content,\r\n            file_name=st.session_state.active_file,\r\n            mime=\"text/plain\"\r\n        )\r\n\r\nwith tab2:\r\n    st.subheader(\"👁️ Kod Önizlemesi\")\r\n    \r\n    st.markdown(\"\"\"\r\n    <div class=\"success-box\">\r\n        <h4>🚀 Streamlit'te Çalıştırma Talimatları:</h4>\r\n        <ol>\r\n            <li>Kodu kopyalayın veya dosyayı indirin</li>\r\n            <li>Yeni bir .py dosyası oluşturup yapıştırın</li>\r\n            <li><code>streamlit run dosya_adi.py</code> komutu ile çalıştırın</li>\r\n        </ol>\r\n    </div>\r\n    \"\"\", unsafe_allow_html=True)\r\n    \r\n    # Kod syntax highlighting\r\n    st.code(current_file_content, language='python')\r\n\r\nwith tab3:\r\n    st.subheader(\"📊 Kod Analizi\")\r\n    \r\n    # Kod istatistikleri\r\n    lines = current_file_content.split('\\n')\r\n    \r\n    col1, col2, col3, col4 = st.columns(4)\r\n    \r\n    with col1:\r\n        st.metric(\"📏 Toplam Satır\", len(lines))\r\n    \r\n    with col2:\r\n        non_empty_lines = len([line for line in lines if line.strip()])\r\n        st.metric(\"📝 Kod Satırları\", non_empty_lines)\r\n    \r\n    with col3:\r\n        comment_lines = len([line for line in lines if line.strip().startswith('#')])\r\n        st.metric(\"💬 Yorum Satırları\", comment_lines)\r\n    \r\n    with col4:\r\n        import_lines = len([line for line in lines if line.strip().startswith(('import ', 'from '))])\r\n        st.metric(\"📦 Import Satırları\", import_lines)\r\n    \r\n    # Import analizi\r\n    imports = [line.strip() for line in lines if line.strip().startswith(('import ', 'from '))]\r\n    if imports:\r\n        st.subheader(\"📦 Kullanılan Kütüphaneler\")\r\n        for imp in imports:\r\n            st.code(imp, language='python')\r\n\r\n# Footer\r\nst.divider()\r\nst.markdown(\"\"\"\r\n<div style=\"text-align: center; color: #666; padding: 1rem;\">\r\n    <p>🚀 <strong>Streamlit Kodlama Arayüzü</strong> | Tab geçişli proje yönetimi</p>\r\n    <p>💡 Projelerinizi organize edin, kodlayın ve test edin!</p>\r\n</div>\r\n\"\"\", unsafe_allow_html=True)"
  }
}